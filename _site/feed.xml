

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>히히</title>
  <subtitle>-</subtitle>
  <updated>2024-09-11T17:16:46+09:00</updated>
  <author>
    <name>jinny</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 jinny </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 6장 키-값 저장소 설계</title>
    <link href="http://localhost:4000/posts/%ED%82%A4_%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 6장 키-값 저장소 설계" />
    <published>2024-03-27T00:00:00+09:00</published>
  
    <updated>2023-03-27T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%ED%82%A4_%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/%ED%82%A4_%EA%B0%92-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="프로그래밍 방법" />
    
  

  <summary>키-값 데이터베이스라고도 불리는 비 관계형 데이터베이스. 성능상의 이유로 키는 짧을 수록 좋음
값 저장소 중 유명한 것으로는 아마존 다이나모, memcached, redis 등이 있음

서버가 한대 일 경우 구현은 간단함. 그러나 모든 데이터를 메모리안에 두는 것이 불가능할수도 있다는 약점을 가짐 -&amp;amp;gt; 데이터 압축 or 자주쓰는 데이터만 메모리에 저장 or 분산 키-값 저장소 생성

분산 키-값 저장소
분산 해시 테이블이라고도 불림
CAP정리

  데이터 일관성(consistency) : 분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계없이 언제나 같은 데이터를 보게되어야함
  가용성(availability) : 분산시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생해도 ...</summary>

  </entry>

  
  <entry>
    <title>[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 4장 처리율 제한 장치의 설계</title>
    <link href="http://localhost:4000/posts/%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 4장 처리율 제한 장치의 설계" />
    <published>2024-03-27T00:00:00+09:00</published>
  
    <updated>2024-03-27T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/%EC%B2%98%EB%A6%AC%EC%9C%A8-%EC%A0%9C%ED%95%9C-%EC%9E%A5%EC%B9%98%EC%9D%98-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="프로그래밍 방법" />
    
  

  <summary>처리율 제한 장치
클라이언트나 서비스가 보내는 트래픽의 처리율을 제어하기위한장치. HTTP를 예로들면 특정 기간 내 전송되는 클라이언트의 요청횟수를 제한함. api의 요청횟수가 임계치를 넘어서면 추가로 도달한 모든 호출은 block됨

  토큰 버킷
    
      지정된 용량을 갖는 컨테이너. 이 버킷에 사전 설정된 양의 토큰이 주기적으로 채워짐. 꽉차면 더 이상 추가는 안됨. 용량이 꽉찬 시점에서 추가된 토큰은 버려짐
      요청이 처리될때마다 하나의 토큰을 사용
      요청 처리를 위한 토큰이 없다면? -&amp;amp;gt; 요청 자체를 버림. 토큰이 다시 차도 버린 요청을 처리하지않음
      2개의 인자를 받음
        
          버킷 크기 : 버킷에 담을 수 있는 토큰의 최대 ...</summary>

  </entry>

  
  <entry>
    <title>[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 5장 안정 해시 설계</title>
    <link href="http://localhost:4000/posts/%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 5장 안정 해시 설계" />
    <published>2024-03-27T00:00:00+09:00</published>
  
    <updated>2024-03-27T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="프로그래밍 방법" />
    
  

  <summary>책정보


해시 키 재배치 문제
N개의 캐시서버가 있다고 가정, 이 서버들의 부하를 나누려면
serverindex = hash(key)%N(N이 서버의 개수)
위 계산공식으로


  
    
      키
      해시
      해시%4(서버인덱스)[실제값아님!귀찮아서 대충함]
    
  
  
    
      key0
      13414213
      1
    
    
      key1
      131231
      0
    
    
      key2
      23123
      2
    
    
      key3
      12312
      0
    
    
      key4
      34253
      1
    
    
      key5
  ...</summary>

  </entry>

  
  <entry>
    <title>[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 1장 사용자 수에 따른 규모 확장성</title>
    <link href="http://localhost:4000/posts/%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/" rel="alternate" type="text/html" title="[책] 가상 면접 사례로 배우는 대규모 시스템 설계 기초 - 1장 사용자 수에 따른 규모 확장성" />
    <published>2024-03-17T00:00:00+09:00</published>
  
    <updated>2024-03-17T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/</id>
    <content src="http://localhost:4000/posts/%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B7%9C%EB%AA%A8-%ED%99%95%EC%9E%A5%EC%84%B1/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="프로그래밍 방법" />
    
  

  <summary>책정보

웹 계층과 데이터 계층

웹 서버와 데이터베이스의 서버가 각각 1개씩인 구조
여기서 서버를 확장(스케일업)한다는 것은 수직적 규모 확장, 수평적 규모 확장 2가지로 나뉜다

  수직적 규모 확장(vertical scaling) : 고사향자원을 추가하는 행위
    
      한계가 있음. 한대의 서버에 CPU나 메모리를 무한대로 증설할 수는 없음
      장애에대한 자동복구(failover) 방안이나 다중화(re-dundancy) 방안을 제시하지 않음 -&amp;amp;gt; 서버 장애 시 웹사이트/앱이 완전 중단
    
  
  수평적 규모 확장(scale out) : 서버를 추가해 성능을 개선하는 행위
  
    
      대규모 애플리케이션을 지원할때 적절한 방법
      로드밸런서
    ...</summary>

  </entry>

  
  <entry>
    <title>[김영한 스프링 핵심원리 - 고급] 프록시 기술과 한계</title>
    <link href="http://localhost:4000/posts/%ED%94%84%EB%A1%9D%EC%8B%9C%EA%B8%B0%EC%88%A0%EA%B3%BC%ED%95%9C%EA%B3%84/" rel="alternate" type="text/html" title="[김영한 스프링 핵심원리 - 고급] 프록시 기술과 한계" />
    <published>2024-03-02T00:00:00+09:00</published>
  
    <updated>2024-03-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%ED%94%84%EB%A1%9D%EC%8B%9C%EA%B8%B0%EC%88%A0%EA%B3%BC%ED%95%9C%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/%ED%94%84%EB%A1%9D%EC%8B%9C%EA%B8%B0%EC%88%A0%EA%B3%BC%ED%95%9C%EA%B3%84/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="Spring" />
    
  

  <summary>JDK 동적 프록시의 한계


  
    타입캐스팅

    인터페이스 기반으로 프록시를 생성하기때문에 구체클래스로 타입캐스팅이 불가능하다는 한계가 있음

      package hello.aop.proxys;
    
  import org.junit.jupiter.api.Assertions;
  import org.junit.jupiter.api.Test;
  import org.springframework.aop.framework.ProxyFactory;
    
  import hello.aop.member.MemberService;
  import hello.aop.member.MemberServiceImpl;
  import lombok.extern.slf4j.Slf4j;
    
  @...</summary>

  </entry>

</feed>


