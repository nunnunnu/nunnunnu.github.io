

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Jinny</title>
  <subtitle>-</subtitle>
  <updated>2024-09-02T15:25:37+09:00</updated>
  <author>
    <name>jinny</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 jinny </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>람다와 스트림(Lambda &amp; Stream)</title>
    <link href="http://localhost:4000/posts/%EB%9E%8C%EB%8B%A4%EC%99%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC(Lambda&amp;Stream)/" rel="alternate" type="text/html" title="람다와 스트림(Lambda &amp;amp; Stream)" />
    <published>2022-09-02T00:00:00+09:00</published>
  
    <updated>2022-09-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%9E%8C%EB%8B%A4%EC%99%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC(Lambda&amp;Stream)/</id>
    <content src="http://localhost:4000/posts/%EB%9E%8C%EB%8B%A4%EC%99%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC(Lambda&amp;Stream)/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="JAVA" />
    
  

  <summary>람다식(Lambda Experssion)

: 함수(메소드)를 간단한 식으로 표현하는 법 (ex. (a, b) → a &amp;amp;gt; b ? a : b )


  익명함수(이름이 없는 함수, anonymous function) : 반환타입, 이름을 지우고 사이에 →를 붙인다
  함수와 메소드는 근본적으로 동일하나 함수는 일반적 용어, 메소드는 객체지향개념 용어. 함수는 클래스에 독립적(클래스 바깥에 있는것. 자바에서는 불가능), 메소드는 클래스에 종속적(클래스안에 있음)
  작성 법
    
      
        메소드의 이름과 반환타입 제거 후 ‘ →’를 블럭{}앞에 추가
 ( ex. (int a, int b) → return a&amp;amp;gt;b? a:b;)
      
      
        반환값이 있...</summary>

  </entry>

  
  <entry>
    <title>쓰레드(thread)</title>
    <link href="http://localhost:4000/posts/%EC%93%B0%EB%A0%88%EB%93%9C(thread)/" rel="alternate" type="text/html" title="쓰레드(thread)" />
    <published>2022-08-28T00:00:00+09:00</published>
  
    <updated>2022-08-28T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%93%B0%EB%A0%88%EB%93%9C(thread)/</id>
    <content src="http://localhost:4000/posts/%EC%93%B0%EB%A0%88%EB%93%9C(thread)/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="JAVA" />
    
  

  <summary>프로세스와 쓰레드(process &amp;amp;amp; thread)


  프로세스 : 실행중인 프로그램. 자원(resources)과 쓰레드로 구성 (공장)
  쓰레드 : 프로세스 내에서 실제 작업을 수행. 모든 프로세서는 최소 하나의 쓰레드를 가지고 있다. (일꾼)
  
    싱글 쓰레드 프로세스 = 자원 + 쓰레드

      public class  Main {
    
  	public static void main(String[] args) {
  		long startTime = System.currentTimeMillis();
    		
  		for(int i=0;i&amp;amp;lt;300;i++) {
  			System.out.printf(&amp;quot;%s&amp;quot;, new String(&amp;quot;-&amp;quot;));
  		}
    	...</summary>

  </entry>

  
  <entry>
    <title>지네릭스, 열거형, 애너테이션</title>
    <link href="http://localhost:4000/posts/%EC%A7%80%EB%84%A4%EB%A6%AD%EC%8A%A4_%EC%97%B4%EA%B1%B0%ED%98%95_%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98/" rel="alternate" type="text/html" title="지네릭스, 열거형, 애너테이션" />
    <published>2022-08-26T00:00:00+09:00</published>
  
    <updated>2022-08-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%A7%80%EB%84%A4%EB%A6%AD%EC%8A%A4_%EC%97%B4%EA%B1%B0%ED%98%95_%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98/</id>
    <content src="http://localhost:4000/posts/%EC%A7%80%EB%84%A4%EB%A6%AD%EC%8A%A4_%EC%97%B4%EA%B1%B0%ED%98%95_%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="JAVA" />
    
  

  <summary>지네릭스(Generics)

: 컴파일시 타입을 체크해주는 기능(compile-time type check) - JDK1.5

객체의 타입 안정성을 높이고 형변환의 번거로움을 줄임.
⇒ 코드가 간결해짐, ClassCastException(형변환 에러) 방지

import java.util.ArrayList;

public class  Main {
	
	public static void main(String[] args) {
//		ArrayList list = new ArrayList(); //JDK1.5이전, 지네릭스 도입이전에는 이렇게 썻음
//		list.add(10);
//		list.add(20);
//		list.add(&amp;quot;30&amp;quot;);  //String
//		
//		Integer i = (i...</summary>

  </entry>

  
  <entry>
    <title>컬렉션 프레임웍(collections framework)</title>
    <link href="http://localhost:4000/posts/%EC%BB%AC%EB%A0%89%EC%85%98_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8D(collections_framework)/" rel="alternate" type="text/html" title="컬렉션 프레임웍(collections framework)" />
    <published>2022-08-21T00:00:00+09:00</published>
  
    <updated>2024-09-02T15:10:17+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%BB%AC%EB%A0%89%EC%85%98_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8D(collections_framework)/</id>
    <content src="http://localhost:4000/posts/%EC%BB%AC%EB%A0%89%EC%85%98_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8D(collections_framework)/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="JAVA" />
    
  

  <summary>컬렉션 프레임웍(collections framework)


  
    컬렉션(collection)

    : 여러 객체(데이터)를 모아놓은 것
  
  
    프레임웍(framework)

    : 표준화, 정형화된 체계적인 프로그램 방식 (Spring)
  
  
    컬렉션 프레임웍(collections framework)

    : 컬렉션(다수의 객체)를 다루기 위한 표준화된 프로그래밍 방식

    컬랙션을 쉽고 편리하게 다룰 수 있는 다양한 클래스 제공(객체 저장, 삭제, 검색, 정렬 등)

    java.util 패키지에 포함. JDK1.2부터 제공(그전엔 표준화가 안됨)
  
  
    컬렉션 클래스(collections class)

    : 다수의 데이터를 저장할 수 ...</summary>

  </entry>

  
  <entry>
    <title>날짜와 시간 &amp; 형식화</title>
    <link href="http://localhost:4000/posts/%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84-&amp;-%ED%98%95%EC%8B%9D%ED%99%94/" rel="alternate" type="text/html" title="날짜와 시간 &amp;amp; 형식화" />
    <published>2022-08-21T00:00:00+09:00</published>
  
    <updated>2024-09-01T22:37:02+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84-&amp;-%ED%98%95%EC%8B%9D%ED%99%94/</id>
    <content src="http://localhost:4000/posts/%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84-&amp;-%ED%98%95%EC%8B%9D%ED%99%94/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="JAVA" />
    
  

  <summary>날짜와 시간


  
    java.util.Date : 날짜와 시간을 다룰 목적으로 만들어진 클래스(JDK1.0)
  date의 메소드는 거의 사용되지 않지만(deprecated), 여전히 쓰이고 잇다.
  
  java.util.Calendar :Date클래스를 개선한 새로운 클래스(JDK1.1), 여전히 단점이 있다 (실무에는 아직 쓰이는 곳이 많음
    
      날짜와 시간을 같이 다루는 것이 단점
    
  
  java.time 패키지 : Date와 Calendar의 단점을 개선한 새로운 클래스들을 제공(JDK1.8=JDK8)
    
      날짜와 시간의 클래스를 나누어 놓음(LocalDate, LocalTime, LocalDateTime)
    
  


Calender클래...</summary>

  </entry>

</feed>


