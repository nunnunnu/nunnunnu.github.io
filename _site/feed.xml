

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>히히</title>
  <subtitle>-</subtitle>
  <updated>2025-05-20T21:19:28+09:00</updated>
  <author>
    <name>jinny</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2025 jinny </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Spring boot&amp;Kotlin] FCM을 사용한 모바일 push 알림 보내기</title>
    <link href="http://localhost:4000/posts/firebase-fcm/" rel="alternate" type="text/html" title="[Spring boot&amp;amp;Kotlin] FCM을 사용한 모바일 push 알림 보내기" />
    <published>2025-05-01T00:00:00+09:00</published>
  
    <updated>2025-05-10T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/firebase-fcm/</id>
    <content src="http://localhost:4000/posts/firebase-fcm/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="외부API연동" />
    
  

  <summary>발단

진행중인 프로젝트의 프론트를 앱에도 출시하게되면서 쪽지함의 알람기능을 안드로이드 앱의 모바일 push 알람으로도 구현하려 알아보기시작했다.

그러다가 발견한 것이 FCM이다
FCM이란?
Firebase Cloud Messaging의 줄임말으로 구글의 firebase 플랫폼에서 지원하는 메세징 서비스이다. 서버에서 안드로이드 앱으로 메세지를 안정적으로 전달할 수 있다

백엔드 서버의 구현방법만 정리하였다



구현


  Firebase 프로젝트 생성
 Firebase접속하여 프로젝트를 생성해준다
 
 
 생성에는 다소 시간이 걸리며 완료되면 다음 단계로 넘어간다
  비공개 키 발급
 프로젝트 설정 -&amp;amp;gt; 서비스 계정에서 새 비공개 키 생성 버튼을 눌러 비공개키를 다운로드 받아준다
 
 
  ...</summary>

  </entry>

  
  <entry>
    <title>[Docker] docker compose를 사용한 로컬 개발환경 구축</title>
    <link href="http://localhost:4000/posts/docker/" rel="alternate" type="text/html" title="[Docker] docker compose를 사용한 로컬 개발환경 구축" />
    <published>2025-04-25T00:00:00+09:00</published>
  
    <updated>2025-04-25T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/docker/</id>
    <content src="http://localhost:4000/posts/docker/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="Docker" />
    
  

  <summary>발단
그동안 여러 권의 도커 관련 책을 읽었지만 개념이 명확히 잡히지 않았다 그래서 현재 진행 중인 프로젝트에 docker-compose를 적용해 로컬 개발 환경을 구성하며 실습해보기로 했다.

준비 과정에서 우연히 도커 위에 데이터베이스를 운영하지 않는 이유라는 글을 보게 되었고, 도커 상에서 데이터베이스를 운영할 경우 돌발 상황에서 안정성 문제/퍼포먼스 저하가 생길 수 있다는 내용을 접했다. (아직 완전히 이해한 것은 아니다.)

이러한 이유로 EC2 운영 환경에는 적용하지 않고, 로컬 환경에만 docker-compose를 도입하고 ec2 운영환경의 도커 도입은 더 고민해보기로했다



구현
먼저 인텔리제이의 setting-plugins에서 docker 플러그인을 먼저 설치해준다

MySQL 이미지...</summary>

  </entry>

  
  <entry>
    <title>[Nginx] 스프링부트 무중단 배포</title>
    <link href="http://localhost:4000/posts/%EB%AC%B4%EC%A4%91%EB%8B%A8%EB%B0%B0%ED%8F%AC/" rel="alternate" type="text/html" title="[Nginx] 스프링부트 무중단 배포" />
    <published>2025-04-20T00:00:00+09:00</published>
  
    <updated>2025-04-21T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%AC%B4%EC%A4%91%EB%8B%A8%EB%B0%B0%ED%8F%AC/</id>
    <content src="http://localhost:4000/posts/%EB%AC%B4%EC%A4%91%EB%8B%A8%EB%B0%B0%ED%8F%AC/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="DevOps" />
    
  

  <summary>스프링 부트와 AWS로 혼자 구현하는 웹 서비스의 9장을 참고하였으나

책은 젠킨스가 아닌 travis ci 를 사용하였기때문에 중간부터 달라질거라 게시글 카테고리를 분리했다


  대표적인 무중단 배포 방식
    
      aws에서 블루 그린 무중단 배포
      도커를 이용한 웹서비스 무중단 배포
      L4 스위치를 이용한 무중단 배포(L4가 고가의 장비라 대형 인터넷기업을 제외하고는 거의 사용하지않음)
      엔진엑스를 이용한 무중단 배포 &amp;amp;lt;- 가장 저렴하고 쉽기때문에 이번에 사용
        
          웹 서버, 리버스 프록시, 캐싱, 로드 밸런싱, 미디어 스트리밍 등을 위한 오픈 소스 소프트웨어
        
      
    
  
  리버스 프록시
  엔...</summary>

  </entry>

  
  <entry>
    <title>[Spring boot&amp;Kotlin] CaffeinCahe 사용해보기</title>
    <link href="http://localhost:4000/posts/spring-Caffeine-Cache/" rel="alternate" type="text/html" title="[Spring boot&amp;amp;Kotlin] CaffeinCahe 사용해보기" />
    <published>2025-04-13T00:00:00+09:00</published>
  
    <updated>2025-04-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/spring-Caffeine-Cache/</id>
    <content src="http://localhost:4000/posts/spring-Caffeine-Cache/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="Spring" />
    
  

  <summary>Cache


  Local Cache
    
      서버에 캐시를 저장
      다른서버의 캐시를 참조하기 어려움(서버를 2대이상 두는 경우 서버별로 데이터가 다르게 조회될 수 있어서 데이터 일원화를 위한 별도의 조치 필요)
      속도가 빠름
      서버에서 캐시를 가지고있기때문에 캐시 용량에 따라 서버에 부담이갈수도 있음. 용량 설정 필수
    
  
  Global Cache
    
      별도의 캐시서버를 이용(redis 등)
      local cache보다는 느리다
    
  


나는 작은 프로젝트라 서버를 2대이상 둘 일이 없어서 카페인 캐시를 사용하기로 했다

서버가 구동할때 미리 캐시를 로드해두는 방식도 있지만, 
프로젝트가 그정도로 크지는 않고 하루에 접...</summary>

  </entry>

  
  <entry>
    <title>[Jenkins 자동 빌드환경 구축 3] 운영서버 접근 - 자동 빌드 설정</title>
    <link href="http://localhost:4000/posts/jenkins3/" rel="alternate" type="text/html" title="[Jenkins 자동 빌드환경 구축 3] 운영서버 접근 - 자동 빌드 설정" />
    <published>2025-03-20T00:00:00+09:00</published>
  
    <updated>2025-04-18T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/jenkins3/</id>
    <content src="http://localhost:4000/posts/jenkins3/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="Jenkins" />
    
  

  <summary>stage 3 - Deploy
이까지 성공했다면 jar파일은 생성이 된것이다. 문제는 우리가 실제로 jar파일을 구동할 ec2서버로 jar파일을 보내주어야하는것(별생각없이 개설하다보니 백엔드 서버는 아마존 리눅스, 젠킨스서버는 우분투를 사용하고있어 사용자 이름이 좀 뒤죽박죽이다…구현에는 무리가없으니 일단 진행했다)

백엔드 서버 연결
이제 젠킨스의 ec2에서 jar 파일 전달을 위해 백엔드 서버의 ec2로 접근이 가능하도록 권한을 열어주어야한다.

  젠킨스 서버에서 sudo docker exec -it jenkins bash 명령어로 젠킨스 컨테이너 안에 접속한다
  ssh-keygen -t rsa -b 4096 명령어로 SSH 키를 먼저 생성해준다
 사진과 같이 뜬다면 성공한것이다
 
  젠킨스 컨...</summary>

  </entry>

</feed>


