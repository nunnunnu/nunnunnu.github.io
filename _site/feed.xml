

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>히히</title>
  <subtitle>-</subtitle>
  <updated>2025-05-20T15:52:17+09:00</updated>
  <author>
    <name>jinny</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2025 jinny </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Spring boot&amp;Kotlin] CaffeinCahe 사용해보기</title>
    <link href="http://localhost:4000/posts/spring-Caffeine-Cache/" rel="alternate" type="text/html" title="[Spring boot&amp;amp;Kotlin] CaffeinCahe 사용해보기" />
    <published>2025-04-13T00:00:00+09:00</published>
  
    <updated>2025-04-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/spring-Caffeine-Cache/</id>
    <content src="http://localhost:4000/posts/spring-Caffeine-Cache/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="Spring" />
    
  

  <summary>Cache


  Local Cache
    
      서버에 캐시를 저장
      다른서버의 캐시를 참조하기 어려움(서버를 2대이상 두는 경우 서버별로 데이터가 다르게 조회될 수 있어서 데이터 일원화를 위한 별도의 조치 필요)
      속도가 빠름
      서버에서 캐시를 가지고있기때문에 캐시 용량에 따라 서버에 부담이갈수도 있음. 용량 설정 필수
    
  
  Global Cache
    
      별도의 캐시서버를 이용(redis 등)
      local cache보다는 느리다
    
  


나는 작은 프로젝트라 서버를 2대이상 둘 일이 없어서 카페인 캐시를 사용하기로 했다

서버가 구동할때 미리 캐시를 로드해두는 방식도 있지만, 
프로젝트가 그정도로 크지는 않고 하루에 접...</summary>

  </entry>

  
  <entry>
    <title>[Google Vision API 연동] 이미지 분석 API 사용하기</title>
    <link href="http://localhost:4000/posts/google-vision-api/" rel="alternate" type="text/html" title="[Google Vision API 연동] 이미지 분석 API 사용하기" />
    <published>2024-11-02T00:00:00+09:00</published>
  
    <updated>2024-11-03T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/google-vision-api/</id>
    <content src="http://localhost:4000/posts/google-vision-api/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="외부API연동" />
    
  

  <summary>발단

친구들과 사용할 서비스를 구현 도중, 친구들이 원하는 요구사항을 듣다보니 
메신저 캡처를 내가 구현한 서비스에서 자동 변환해주는 기능이 필요하다고 판단하였다

메신저 캡처를 db로 변환하기 위해서 google cloud vsion api의 텍스트 인식 기능을 사용하기로 결정하였다
Google Vision Ai

https://cloud.google.com/vision?hl=ko

구글에서 제공하는 머신러닝 기반 이미지 분석 AI로 이미지의 텍스트를 인식하고 텍스트의 위치정보도 응답받을 수 있는 open api이다



구현
사전 설정


  
    구글 클라우드에 접속하여 새 프로젝트를 개설해준다

    
 
  
  
    서비스 계정에서  Json 키를 발급받는다

    
 
 
 
...</summary>

  </entry>

  
  <entry>
    <title>[REDIS] Spring boot - REDIS pub/sub 구현(서버 간 캐시 데이터 불일치 해결)</title>
    <link href="http://localhost:4000/posts/REDIS_pub_sub/" rel="alternate" type="text/html" title="[REDIS] Spring boot - REDIS pub/sub 구현(서버 간 캐시 데이터 불일치 해결)" />
    <published>2024-06-02T00:00:00+09:00</published>
  
    <updated>2024-06-15T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/REDIS_pub_sub/</id>
    <content src="http://localhost:4000/posts/REDIS_pub_sub/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="Redis" />
    
  

  <summary>발단

  프로젝트 구조

처음에는 단일서버로 개발을 시작하며 서버의 캐시 저장방식을 로컬 카페인 캐시로 결정해 개발을 진행중인 상태에서 
성능을 위해 서버가 늘어나면서 문제가 발생했다


api가 호출되어 캐싱해둔 데이터가 변경/삭제 가 일어났을 경우 1번 서버에서 요청을 처리했다면 
기존 구조로는 2번 서버에서 캐시를 업데이트 할 수 없는 상황이었다

서버간의 캐시 동기화를 위해 2가지 개선안이 나온 상태였다(redis 개설/설정은 이미 되어있는 상황)

  redis를 사용하여 글로벌 캐시로 구조 변경
  redis pub/sub을 이용하여 캐시 업데이트 신호 송/수신


이미 프로젝트 막바지라서 캐시구조를 글로벌캐시로 변경하는데 리소스가 많이 든다고 판단이되어 2번으로 결정이되었고 내가 pub/...</summary>

  </entry>

  
  <entry>
    <title>[사이드프로젝트 aws배포] DNS발급/연결 &amp; HTTPS 설정</title>
    <link href="http://localhost:4000/posts/domain_https/" rel="alternate" type="text/html" title="[사이드프로젝트 aws배포] DNS발급/연결 &amp;amp; HTTPS 설정" />
    <published>2024-04-20T00:00:00+09:00</published>
  
    <updated>2024-04-20T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/domain_https/</id>
    <content src="http://localhost:4000/posts/domain_https/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="AWS" />
    
  

  <summary>도메인 발급

사이드 프로젝트의 비용절감을 위해 무료로 도메인을 발급받을 수 있는 내도메인한국에서 도메인을 발급받음

등록하기로 뜨는 test-domain.kro.kr 이 등록가능한 도메인임

등록하기를 누르면 보안코드를 입력하고 도메인 관리에 선택한 도메인이 들어온걸 확인가능함

EC2의 퍼플릭 IP를 이미 발급받은 상태이기때문에 

IP연결에 예시로 로컬IP가 적힌 쪽에 퍼블릭 IP를 입력하고 저장해줌.

이까지만해줘도 도메인으로 접속하면 api호출이 가능하나 http로 접속이된다는 문제가있음
aws 사용 (최종 사용하지 않았음)
인증서 발급

AWS Certificate Manager에서 인증서 먼저 발급(단 클라우드 프론트(CDN)는 https를 적용하려면 미국 동부 버지니아북부에서 발급받아야...</summary>

  </entry>

  
  <entry>
    <title>[가상 면접 사례로 배우는 대규모 시스템 설계 기초] 15장 구글드라이브 설계</title>
    <link href="http://localhost:4000/posts/%EA%B5%AC%EA%B8%80%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="[가상 면접 사례로 배우는 대규모 시스템 설계 기초] 15장 구글드라이브 설계" />
    <published>2024-03-30T00:00:00+09:00</published>
  
    <updated>2024-03-30T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EA%B5%AC%EA%B8%80%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EC%84%A4%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/%EA%B5%AC%EA%B8%80%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>jinny</name>
    </author>

  
    
    <category term="프로그래밍 방법" />
    
  

  <summary>책정보


필요한 api는 단순업로드/이어올리기(네트워크중단가능성높음)/다운로드/갱신 임


  블록저장소 서버 : 파일블록을 클라우드 저장소에 저장하는 서버. 파일을 여러 블록으로 나누고 각 블록에 고유 해시값이 할당됨.
    
      최적화 방법
        
          델타 동기화 : 파일 수정시 전체파일이아닌 수정된 블록만 동기화
          압축 : 블룩단위로 압축해두면 데이터크기를 줄일 수 있음
        
      
    
  


flowchart TD
파일--&amp;amp;gt;블록1--&amp;amp;gt;압축1--&amp;amp;gt;암호화1--&amp;amp;gt;클라우드저장소;
파일--&amp;amp;gt;블록2--&amp;amp;gt;압축2--&amp;amp;gt;암호화2--&amp;amp;gt;클라우드저장소;
파일--&amp;amp;gt;블록3--&amp;amp;gt;압축3--&amp;amp;gt;암호...</summary>

  </entry>

</feed>


